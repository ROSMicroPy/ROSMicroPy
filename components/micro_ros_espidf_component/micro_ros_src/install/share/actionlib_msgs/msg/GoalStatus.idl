// generated from rosidl_adapter/resource/msg.idl.em
// with input from actionlib_msgs/msg/GoalStatus.msg
// generated code does not contain a copyright notice

#include "actionlib_msgs/msg/GoalID.idl"

module actionlib_msgs {
  module msg {
    module GoalStatus_Constants {
      @verbatim (language="comment", text=
        "The goal has yet to be processed by the action server.")
      const uint8 PENDING = 0;
      @verbatim (language="comment", text=
        "The goal is currently being processed by the action server.")
      const uint8 ACTIVE = 1;
      @verbatim (language="comment", text=
        "The goal received a cancel request after it started executing" "\n"        "  and has since completed its execution (Terminal State).")
      const uint8 PREEMPTED = 2;
      @verbatim (language="comment", text=
        "The goal was achieved successfully by the action server" "\n"        "  (Terminal State).")
      const uint8 SUCCEEDED = 3;
      @verbatim (language="comment", text=
        "The goal was aborted during execution by the action server due" "\n"        "   to some failure (Terminal State).")
      const uint8 ABORTED = 4;
      @verbatim (language="comment", text=
        "The goal was rejected by the action server without being processed," "\n"        "   because the goal was unattainable or invalid (Terminal State).")
      const uint8 REJECTED = 5;
      @verbatim (language="comment", text=
        "The goal received a cancel request after it started executing" "\n"        "   and has not yet completed execution.")
      const uint8 PREEMPTING = 6;
      @verbatim (language="comment", text=
        "The goal received a cancel request before it started executing, but" "\n"        "   the action server has not yet confirmed that the goal is canceled.")
      const uint8 RECALLING = 7;
      @verbatim (language="comment", text=
        "The goal received a cancel request before it started executing" "\n"        "   and was successfully cancelled (Terminal State).")
      const uint8 RECALLED = 8;
      @verbatim (language="comment", text=
        "An action client can determine that a goal is LOST. This should not" "\n"        "   be sent over the wire by an action server.")
      const uint8 LOST = 9;
    };
    struct GoalStatus {
      actionlib_msgs::msg::GoalID goal_id;

      uint8 status;

      @verbatim (language="comment", text=
        "Allow for the user to associate a string with GoalStatus for debugging.")
      string text;
    };
  };
};
